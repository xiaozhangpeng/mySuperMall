{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js!C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_babel-loader@8.2.4@babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_vue-loader@15.9.8@vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\src\\components\\common\\swiper\\Swiper.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\src\\components\\common\\swiper\\Swiper.vue","mtime":1648636867501},{"path":"C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\babel.config.js","mtime":1648446710422},{"path":"C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_thread-loader@2.1.3@thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_babel-loader@8.2.4@babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\SuperMarket\\supermarket\\node_modules\\_vue-loader@15.9.8@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Swiper\",\n  props: {\n    interval: {\n      type: Number,\n      default: 3000\n    },\n    animDuration: {\n      type: Number,\n      default: 300\n    },\n    moveRatio: {\n      type: Number,\n      default: 0.25\n    },\n    showIndicator: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      slideCount: 0,\n      // 元素个数\n      totalWidth: 0,\n      // swiper的宽度\n      swiperStyle: {},\n      // swiper样式\n      currentIndex: 1,\n      // 当前的index\n      scrolling: false // 是否正在滚动\n\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // 1.操作DOM, 在前后添加Slide\n    setTimeout(function () {\n      _this.handleDom(); // 2.开启定时器\n\n\n      _this.startTimer();\n    }, 200);\n  },\n  methods: {\n    /**\n       * 定时器操作\n       */\n    startTimer: function startTimer() {\n      var _this2 = this;\n\n      this.playTimer = window.setInterval(function () {\n        _this2.currentIndex++;\n\n        _this2.scrollContent(-_this2.currentIndex * _this2.totalWidth);\n      }, this.interval);\n    },\n    stopTimer: function stopTimer() {\n      window.clearInterval(this.playTimer);\n    },\n\n    /**\n     * 滚动到正确的位置\n     */\n    scrollContent: function scrollContent(currentPosition) {\n      // 0.设置正在滚动\n      this.scrolling = true; // 1.开始滚动动画\n\n      this.swiperStyle.transition = 'transform ' + this.animDuration + 'ms';\n      this.setTransform(currentPosition); // 2.判断滚动到的位置\n\n      this.checkPosition(); // 4.滚动完成\n\n      this.scrolling = false;\n    },\n\n    /**\n     * 校验正确的位置\n     */\n    checkPosition: function checkPosition() {\n      var _this3 = this;\n\n      window.setTimeout(function () {\n        // 1.校验正确的位置\n        _this3.swiperStyle.transition = '0ms';\n\n        if (_this3.currentIndex >= _this3.slideCount + 1) {\n          _this3.currentIndex = 1;\n\n          _this3.setTransform(-_this3.currentIndex * _this3.totalWidth);\n        } else if (_this3.currentIndex <= 0) {\n          _this3.currentIndex = _this3.slideCount;\n\n          _this3.setTransform(-_this3.currentIndex * _this3.totalWidth);\n        } // 2.结束移动后的回调\n\n\n        _this3.$emit('transitionEnd', _this3.currentIndex - 1);\n      }, this.animDuration);\n    },\n\n    /**\n     * 设置滚动的位置\n     */\n    setTransform: function setTransform(position) {\n      this.swiperStyle.transform = \"translate3d(\".concat(position, \"px, 0, 0)\");\n      this.swiperStyle['-webkit-transform'] = \"translate3d(\".concat(position, \"px), 0, 0\");\n      this.swiperStyle['-ms-transform'] = \"translate3d(\".concat(position, \"px), 0, 0\");\n    },\n\n    /**\n     * 操作DOM, 在DOM前后添加Slide\n     */\n    handleDom: function handleDom() {\n      // 1.获取要操作的元素\n      var swiperEl = document.querySelector('.swiper');\n      var slidesEls = swiperEl.getElementsByClassName('slide'); // 2.保存个数\n\n      this.slideCount = slidesEls.length; // 3.如果大于1个, 那么在前后分别添加一个slide\n\n      if (this.slideCount > 1) {\n        var cloneFirst = slidesEls[0].cloneNode(true);\n        var cloneLast = slidesEls[this.slideCount - 1].cloneNode(true);\n        swiperEl.insertBefore(cloneLast, slidesEls[0]);\n        swiperEl.appendChild(cloneFirst);\n        this.totalWidth = swiperEl.offsetWidth;\n        this.swiperStyle = swiperEl.style;\n      } // 4.让swiper元素, 显示第一个(目前是显示前面添加的最后一个元素)\n\n\n      this.setTransform(-this.totalWidth);\n    },\n\n    /**\n     * 拖动事件的处理\n     */\n    touchStart: function touchStart(e) {\n      // 1.如果正在滚动, 不可以拖动\n      if (this.scrolling) return; // 2.停止定时器\n\n      this.stopTimer(); // 3.保存开始滚动的位置\n\n      this.startX = e.touches[0].pageX;\n    },\n    touchMove: function touchMove(e) {\n      // 1.计算出用户拖动的距离\n      this.currentX = e.touches[0].pageX;\n      this.distance = this.currentX - this.startX;\n      var currentPosition = -this.currentIndex * this.totalWidth;\n      var moveDistance = this.distance + currentPosition; // 2.设置当前的位置\n\n      this.setTransform(moveDistance);\n    },\n    touchEnd: function touchEnd(e) {\n      // 1.获取移动的距离\n      var currentMove = Math.abs(this.distance); // 2.判断最终的距离\n\n      if (this.distance === 0) {\n        return;\n      } else if (this.distance > 0 && currentMove > this.totalWidth * this.moveRatio) {\n        // 右边移动超过0.5\n        this.currentIndex--;\n      } else if (this.distance < 0 && currentMove > this.totalWidth * this.moveRatio) {\n        // 向左移动超过0.5\n        this.currentIndex++;\n      } // 3.移动到正确的位置\n\n\n      this.scrollContent(-this.currentIndex * this.totalWidth); // 4.移动完成后重新开启定时器\n\n      this.startTimer();\n    },\n\n    /**\n     * 控制上一个, 下一个\n     */\n    previous: function previous() {\n      this.changeItem(-1);\n    },\n    next: function next() {\n      this.changeItem(1);\n    },\n    changeItem: function changeItem(num) {\n      // 1.移除定时器\n      this.stopTimer(); // 2.修改index和位置\n\n      this.currentIndex += num;\n      this.scrollContent(-this.currentIndex * this.totalWidth); // 3.添加定时器\n\n      this.startTimer();\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;AAgBA;AACAA,gBADA;AAEAC;AACAC;AACAC,kBADA;AAEAC;AAFA,KADA;AAKAC;AACAF,kBADA;AAEAC;AAFA,KALA;AASAE;AACAH,kBADA;AAEAC;AAFA,KATA;AAaAG;AACAJ,mBADA;AAEAC;AAFA;AAbA,GAFA;AAoBAI;AACA;AACAC,mBADA;AACA;AACAC,mBAFA;AAEA;AACAC,qBAHA;AAGA;AACAC,qBAJA;AAIA;AACAC,sBALA,CAKA;;AALA;AAOA,GA5BA;AA6BAC;AAAA;;AACA;AACAC;AACA,wBADA,CAGA;;;AACA;AACA,KALA,EAKA,GALA;AAMA,GArCA;AAsCAC;AACA;AACA;AACA;AACAC;AAAA;;AACA;AACA;;AACA;AACA,OAHA,EAGA,aAHA;AAIA,KATA;AAUAC;AACAC;AACA,KAZA;;AAcA;AACA;AACA;AACAC;AACA;AACA,4BAFA,CAIA;;AACA;AACA,yCANA,CAQA;;AACA,2BATA,CAWA;;AACA;AACA,KA9BA;;AAgCA;AACA;AACA;AACAC;AAAA;;AACAF;AACA;AACA;;AACA;AACA;;AACA;AACA,SAHA,MAGA;AACA;;AACA;AACA,SATA,CAWA;;;AACA;AACA,OAbA,EAaA,iBAbA;AAcA,KAlDA;;AAoDA;AACA;AACA;AACAG;AACA;AACA;AACA;AACA,KA3DA;;AA6DA;AACA;AACA;AACAC;AACA;AACA;AACA,+DAHA,CAKA;;AACA,yCANA,CAQA;;AACA;AACA;AACA;AACAC;AACAA;AACA;AACA;AACA,OAhBA,CAkBA;;;AACA;AACA,KApFA;;AAsFA;AACA;AACA;AACAC;AACA;AACA,iCAFA,CAIA;;AACA,uBALA,CAOA;;AACA;AACA,KAlGA;AAoGAC;AACA;AACA;AACA;AACA;AACA,yDALA,CAOA;;AACA;AACA,KA7GA;AA+GAC;AACA;AACA,gDAFA,CAIA;;AACA;AACA;AACA,OAFA,MAEA;AAAA;AACA;AACA,OAFA,MAEA;AAAA;AACA;AACA,OAXA,CAaA;;;AACA,+DAdA,CAgBA;;AACA;AACA,KAjIA;;AAmIA;AACA;AACA;AACAC;AACA;AACA,KAxIA;AA0IAC;AACA;AACA,KA5IA;AA8IAC;AACA;AACA,uBAFA,CAIA;;AACA;AACA,+DANA,CAQA;;AACA;AACA;AAxJA;AAtCA","names":["name","props","interval","type","default","animDuration","moveRatio","showIndicator","data","slideCount","totalWidth","swiperStyle","currentIndex","scrolling","mounted","setTimeout","methods","startTimer","stopTimer","window","scrollContent","checkPosition","setTransform","handleDom","swiperEl","touchStart","touchMove","touchEnd","previous","next","changeItem"],"sourceRoot":"src/components/common/swiper","sources":["Swiper.vue"],"sourcesContent":["<template>\n    <div id=\"hy-swiper\">\n      <div class=\"swiper\" @touchstart=\"touchStart\" @touchmove=\"touchMove\" @touchend=\"touchEnd\">\n        <slot></slot>\n      </div>\n      <slot name=\"indicator\">\n      </slot>\n      <div class=\"indicator\">\n        <slot name=\"indicator\" v-if=\"showIndicator && slideCount>1\">\n          <div v-for=\"(item, index) in slideCount\" class=\"indi-item\" :class=\"{active: index === currentIndex-1}\" :key=\"index\"></div>\n        </slot>\n      </div>\n    </div>\n</template>\n\n<script>\n\texport default {\n\t\tname: \"Swiper\",\n    props: {\n      interval: {\n\t\t    type: Number,\n        default: 3000\n      },\n      animDuration: {\n\t\t    type: Number,\n        default: 300\n      },\n      moveRatio: {\n        type: Number,\n        default: 0.25\n      },\n      showIndicator: {\n        type: Boolean,\n        default: true\n      }\n    },\n    data: function () {\n\t\t  return {\n        slideCount: 0, // 元素个数\n        totalWidth: 0, // swiper的宽度\n        swiperStyle: {}, // swiper样式\n        currentIndex: 1, // 当前的index\n        scrolling: false, // 是否正在滚动\n      }\n    },\n    mounted: function () {\n      // 1.操作DOM, 在前后添加Slide\n      setTimeout(() => {\n        this.handleDom();\n\n        // 2.开启定时器\n        this.startTimer();\n      }, 200)\n    },\n    methods: {\n\t\t  /**\n       * 定时器操作\n       */\n      startTimer: function () {\n\t\t    this.playTimer = window.setInterval(() => {\n\t\t      this.currentIndex++;\n\t\t      this.scrollContent(-this.currentIndex * this.totalWidth);\n        }, this.interval)\n      },\n      stopTimer: function () {\n        window.clearInterval(this.playTimer);\n      },\n\n      /**\n       * 滚动到正确的位置\n       */\n      scrollContent: function (currentPosition) {\n        // 0.设置正在滚动\n        this.scrolling = true;\n\n        // 1.开始滚动动画\n        this.swiperStyle.transition ='transform '+ this.animDuration + 'ms';\n        this.setTransform(currentPosition);\n\n        // 2.判断滚动到的位置\n        this.checkPosition();\n\n        // 4.滚动完成\n        this.scrolling = false\n      },\n\n      /**\n       * 校验正确的位置\n       */\n      checkPosition: function () {\n        window.setTimeout(() => {\n          // 1.校验正确的位置\n          this.swiperStyle.transition = '0ms';\n          if (this.currentIndex >= this.slideCount + 1) {\n            this.currentIndex = 1;\n            this.setTransform(-this.currentIndex * this.totalWidth);\n          } else if (this.currentIndex <= 0) {\n            this.currentIndex = this.slideCount;\n            this.setTransform(-this.currentIndex * this.totalWidth);\n          }\n\n          // 2.结束移动后的回调\n          this.$emit('transitionEnd', this.currentIndex-1);\n        }, this.animDuration)\n      },\n\n      /**\n       * 设置滚动的位置\n       */\n      setTransform: function (position) {\n        this.swiperStyle.transform = `translate3d(${position}px, 0, 0)`;\n        this.swiperStyle['-webkit-transform'] = `translate3d(${position}px), 0, 0`;\n        this.swiperStyle['-ms-transform'] = `translate3d(${position}px), 0, 0`;\n      },\n\n      /**\n       * 操作DOM, 在DOM前后添加Slide\n       */\n\t\t  handleDom: function () {\n        // 1.获取要操作的元素\n        let swiperEl = document.querySelector('.swiper');\n        let slidesEls = swiperEl.getElementsByClassName('slide');\n\n        // 2.保存个数\n        this.slideCount = slidesEls.length;\n\n        // 3.如果大于1个, 那么在前后分别添加一个slide\n        if (this.slideCount > 1) {\n          let cloneFirst = slidesEls[0].cloneNode(true);\n          let cloneLast = slidesEls[this.slideCount - 1].cloneNode(true);\n          swiperEl.insertBefore(cloneLast, slidesEls[0]);\n          swiperEl.appendChild(cloneFirst);\n          this.totalWidth = swiperEl.offsetWidth;\n          this.swiperStyle = swiperEl.style;\n        }\n\n        // 4.让swiper元素, 显示第一个(目前是显示前面添加的最后一个元素)\n        this.setTransform(-this.totalWidth);\n      },\n\n      /**\n       * 拖动事件的处理\n       */\n      touchStart: function (e) {\n        // 1.如果正在滚动, 不可以拖动\n        if (this.scrolling) return;\n\n        // 2.停止定时器\n        this.stopTimer();\n\n        // 3.保存开始滚动的位置\n        this.startX = e.touches[0].pageX;\n      },\n\n      touchMove: function (e) {\n        // 1.计算出用户拖动的距离\n        this.currentX = e.touches[0].pageX;\n        this.distance = this.currentX - this.startX;\n        let currentPosition = -this.currentIndex * this.totalWidth;\n        let moveDistance = this.distance + currentPosition;\n\n        // 2.设置当前的位置\n        this.setTransform(moveDistance);\n      },\n\n      touchEnd: function (e) {\n        // 1.获取移动的距离\n        let currentMove = Math.abs(this.distance);\n\n        // 2.判断最终的距离\n        if (this.distance === 0) {\n          return\n        } else if (this.distance > 0 && currentMove > this.totalWidth * this.moveRatio) { // 右边移动超过0.5\n          this.currentIndex--\n        } else if (this.distance < 0 && currentMove > this.totalWidth * this.moveRatio) { // 向左移动超过0.5\n          this.currentIndex++\n        }\n\n        // 3.移动到正确的位置\n        this.scrollContent(-this.currentIndex * this.totalWidth);\n\n        // 4.移动完成后重新开启定时器\n        this.startTimer();\n      },\n\n      /**\n       * 控制上一个, 下一个\n       */\n      previous: function () {\n        this.changeItem(-1);\n      },\n\n      next: function () {\n        this.changeItem(1);\n      },\n\n      changeItem: function (num) {\n        // 1.移除定时器\n        this.stopTimer();\n\n        // 2.修改index和位置\n        this.currentIndex += num;\n        this.scrollContent(-this.currentIndex * this.totalWidth);\n\n        // 3.添加定时器\n        this.startTimer();\n      }\n    }\n\t}\n</script>\n\n<style scoped>\n  #hy-swiper {\n    overflow: hidden;\n    position: relative;\n  }\n\n  .swiper {\n    display: flex;\n  }\n\n  .indicator {\n    display: flex;\n    justify-content: center;\n    position: absolute;\n    width: 100%;\n    bottom: 8px;\n  }\n\n  .indi-item {\n    box-sizing: border-box;\n    width: 8px;\n    height: 8px;\n    border-radius: 4px;\n    background-color: #fff;\n    line-height: 8px;\n    text-align: center;\n    font-size: 12px;\n    margin: 0 5px;\n  }\n\n  .indi-item.active {\n    background-color: rgba(212,62,46,1.0);\n  }\n</style>\n"]}]}